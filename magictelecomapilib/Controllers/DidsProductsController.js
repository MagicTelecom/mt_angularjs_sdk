/**
  *MagicTelecomAPILib
  *
  * This file was automatically generated by APIMATIC v2.0 on 06/22/2016
  */

'use strict';
angular.module('MagicTelecomAPILib').factory('DidsProductsController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * Allow clients to get the list of available phone_numbers
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response
         * @param {string|null} filter    Optional parameter: Allowed fields: country_iso2, region_handle, location_handle, location_name, phone_number, phone_number_type, zip_code
         *
         * @return {promise<mixed>}
         */
        getDids : function(page, limit, filter){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/dids/products/dids";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10,
                "filter" : filter
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get a specific phone_number
         * @param {string} phoneNumber    Required parameter: Phone Number
         *
         * @return {promise<mixed>}
         */
        getDidsByPhoneNumber : function(phoneNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/dids/products/dids/{phone_number}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "phone_number" : phoneNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of available locations.
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response
         * @param {string|null} filter    Optional parameter: Allowed fields: country_iso2, region_handle, location_handle, location_name, prefix, phone_number_type, zip_code, npa, nxx, fax
         *
         * @return {promise<mixed>}
         */
        getLocations : function(page, limit, filter){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/dids/products/locations";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10,
                "filter" : filter
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get a specific location.
         * @param {string} locationHandle    Required parameter: Location Handle
         *
         * @return {promise<mixed>}
         */
        getLocationByHandle : function(locationHandle){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/dids/products/locations/{location_handle}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "location_handle" : locationHandle
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of available trunks
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response
         *
         * @return {promise<mixed>}
         */
        getTrunks : function(page, limit){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/dids/products/trunks";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get a specific trunk
         * @param {string} trunkHandle    Required parameter: Trunk Handle
         *
         * @return {promise<mixed>}
         */
        getTrunkByHandle : function(trunkHandle){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/dids/products/trunks/{trunk_handle}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "trunk_handle" : trunkHandle
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get trunk zones.
         * @param {int} page    Required parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
         * @param {int} limit    Required parameter: Maximum number of results to return in the response.
         *
         * @return {promise<mixed>}
         */
        getCountriesByTrunk : function(page, limit){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/dids/products/trunks/countries";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : page,
                "limit" : limit
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        }
    }
});