/**
  *MagicTelecomAPILib
  *
  * This file was automatically generated by APIMATIC v2.0 on 06/22/2016
  */

'use strict';
angular.module('MagicTelecomAPILib').factory('AccountsController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * Create a new caller location
         * @param {string} accountNumber    Required parameter: Number of the account
         * @param {CallerLocationForm} callerLocationForm    Required parameter: Caller Location Data
         *
         * @return {promise<mixed>}
         */
        createCallerLocations : function(accountNumber, callerLocationForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/caller_locations";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(callerLocationForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
                body : callerLocationForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Get a caller location by Id
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int} callerLocationId    Required parameter: a caller location id
         *
         * @return {promise<mixed>}
         */
        getCallerLocationById : function(accountNumber, callerLocationId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/caller_locations/{caller_location_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "caller_location_id" : callerLocationId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Delete all caller locations
         * @param {string} accountNumber    Required parameter: Account Number
         *
         * @return {promise<string>}
         */
        deleteCallerLocations : function(accountNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/caller_locations";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Update a caller location
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int} callerLocationId    Required parameter: Caller Location Id
         * @param {CallerLocationForm} callerLocationForm    Required parameter: Caller Location Params
         *
         * @return {promise<string>}
         */
        updateCallerLocationById : function(accountNumber, callerLocationId, callerLocationForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/caller_locations/{caller_location_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "caller_location_id" : callerLocationId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(callerLocationForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "PUT",
                queryUrl : queryUrl,
                headers: headers,
                body : callerLocationForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "	 Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Delete a caller location by id
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int} callerLocationId    Required parameter: Caller Location Id
         *
         * @return {promise<string>}
         */
        deleteCallerLocationById : function(accountNumber, callerLocationId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/caller_locations/{caller_location_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "caller_location_id" : callerLocationId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "	 Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of caller locations for the specific account.
         * @param {string} accountNumber    Required parameter: Number of the account
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response.
         *
         * @return {promise<mixed>}
         */
        getCallerLocations : function(accountNumber, page, limit){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/caller_locations";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow the admin to get the list of all accounts.
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response.
         * @param {string|null} filter    Optional parameter: Allowed fields: number, email, contact_number, firstname, lastname. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
         *
         * @return {promise<mixed>}
         */
        getAccounts : function(page, limit, filter){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10,
                "filter" : filter
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Create a new account.
         * @param {AccountForm} accountForm    Required parameter: TODO: type description here
         *
         * @return {promise<mixed>}
         */
        createAccount : function(accountForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts";
            
            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(accountForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
                body : accountForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Delete an account
         * @param {string} accountNumber    Required parameter: Account Number
         *
         * @return {promise<string>}
         */
        deleteAccount : function(accountNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get a specific account.
         * @param {string} accountNumber    Required parameter: Account Number
         *
         * @return {promise<mixed>}
         */
        getAccount : function(accountNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         *  Update an account by a given account_number
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {AccountForm} accountForm    Required parameter: Form parameters
         *
         * @return {promise<string>}
         */
        updateAccount : function(accountNumber, accountForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(accountForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "PUT",
                queryUrl : queryUrl,
                headers: headers,
                body : accountForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Deletes all cdrs requests from customer's account.
         * @param {string} accountNumber    Required parameter: Account Number
         *
         * @return {promise<string>}
         */
        deleteCdrs : function(accountNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/cdrs";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of cdr request for the specific account.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response.
         * @param {string|null} filter    Optional parameter: Allowed fields: service_type, from, to and created. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
         *
         * @return {promise<mixed>}
         */
        getCdrs : function(accountNumber, page, limit, filter){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/cdrs";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10,
                "filter" : filter
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Creates a cdr request
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {CdrForm} cdrsForm    Required parameter: cdrs params
         *
         * @return {promise<mixed>}
         */
        createCdrs : function(accountNumber, cdrsForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/cdrs";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(cdrsForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
                body : cdrsForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to download the cdrs in a file
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} cdrId    Required parameter: Cdr Id
         *
         * @return {promise<mixed>}
         */
        getCdrById : function(accountNumber, cdrId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/cdrs/{cdr_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cdr_id" : cdrId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "	 Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Deletes a cdr file from customer's account.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} cdrId    Required parameter: Cdr Id
         *
         * @return {promise<string>}
         */
        deleteCdrById : function(accountNumber, cdrId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/cdrs/{cdr_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cdr_id" : cdrId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Deletes all phone_number from customer's account. These numbers must be unassigned and returned to Magic stock.
         * @param {string} accountNumber    Required parameter: Account Number
         *
         * @return {promise<string>}
         */
        deleteDids : function(accountNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/dids";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Deletes a phone_number from customer's account. This number must be unassigned and returned to Magic stock.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} telephoneNumber    Required parameter: Telephone Number
         *
         * @return {promise<string>}
         */
        deleteTelephoneNumber : function(accountNumber, telephoneNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/dids/{telephone_number}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "telephone_number" : telephoneNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the a specific phone number.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} telephoneNumber    Required parameter: Telephone Number
         *
         * @return {promise<mixed>}
         */
        getTelephoneNumber : function(accountNumber, telephoneNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/dids/{telephone_number}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "telephone_number" : telephoneNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow client to perform operations on a specific did
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} telephoneNumber    Required parameter: Telephone Number
         * @param {TelephoneNumberForm} telephoneNumberForm    Required parameter: Phone params
         *
         * @return {promise<void>}
         */
        updateTelephoneNumber : function(accountNumber, telephoneNumber, telephoneNumberForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/dids/{telephone_number}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "telephone_number" : telephoneNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(telephoneNumberForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "PATCH",
                queryUrl : queryUrl,
                headers: headers,
                body : telephoneNumberForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of numbers for the specific account
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response.
         * @param {string|null} filter    Optional parameter: Allowed fields: trunk_id, phone_number, country_iso2, region_handle, location_handle, sip_end_point_uri.\n * Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. \n * The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. \n * Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
         *
         * @return {promise<mixed>}
         */
        getDids : function(accountNumber, page, limit, filter){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/dids";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10,
                "filter" : filter
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Deletes all trunks from customer's account. Numbers on that trunk must be unassigned and returned to Magic stock
         * @param {string} accountNumber    Required parameter: Account Number
         *
         * @return {promise<string>}
         */
        deleteTrunks : function(accountNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/trunks";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of trunks for the specific account
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response
         * @param {string|null} filter    Optional parameter: Allowed fields: trunk_handle. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
         *
         * @return {promise<mixed>}
         */
        getTrunks : function(accountNumber, page, limit, filter){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/trunks";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10,
                "filter" : filter
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Deletes a trunk from customer's account. Numbers on that trunk must be unassigned and returned to Magic stock.
         * @param {string} accountNumber    Required parameter: Accoubt Number
         * @param {string} trunkId    Required parameter: Trunk id
         *
         * @return {promise<string>}
         */
        deleteTrunkById : function(accountNumber, trunkId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/trunks/{trunk_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "trunk_id" : trunkId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the a specific trunk
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} trunkId    Required parameter: Trunk id
         *
         * @return {promise<mixed>}
         */
        getTrunkById : function(accountNumber, trunkId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/trunks/{trunk_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "trunk_id" : trunkId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Delete all carts from an account
         * @param {string} accountNumber    Required parameter: Account Number
         *
         * @return {promise<void>}
         */
        deleteCarts : function(accountNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of carts.
         * @param {string} accountNumber    Required parameter: Account number
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response.
         * @param {string|null} filter    Optional parameter: Allowed fields: cart_status_handle, created. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\/users?filter='name::todd|city::denver|title::grand poobah'
         * @param {string|null} sort    Optional parameter: Allowed fields: created. Use sort query-string parameter that contains a delimited set of property names. For each property name, sort in ascending order, and for each property prefixed with a dash ('-') sort in descending order. Separate each property name with a vertical bar ('|'), which is consistent with the separation of the name\\/value pairs in filtering, above. For example, if we want to retrieve users in order of their last name (ascending), first name (ascending) and hire date (descending), the request might look like this www.example.com\\/users?sort='last_name|first_name|-hire_date'
         *
         * @return {promise<mixed>}
         */
        getCarts : function(accountNumber, page, limit, filter, sort){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10,
                "filter" : filter,
                "sort" : sort
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Create an cart
         * @param {string} accountNumber    Required parameter: Account number
         *
         * @return {promise<mixed>}
         */
        createCarts : function(accountNumber){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "User not authorized to perform the operation", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Delete a cart
         * @param {string} accountNumber    Required parameter: Account number
         * @param {string} cartId    Required parameter: Cart Id
         *
         * @return {promise<void>}
         */
        deleteCart : function(accountNumber, cartId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts/{cart_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cart_id" : cartId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get a specific cart.
         * @param {string} accountNumber    Required parameter: Account number
         * @param {string} cartId    Required parameter: Cart id
         *
         * @return {promise<mixed>}
         */
        getCart : function(accountNumber, cartId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts/{cart_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cart_id" : cartId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Checkout a cart and create an order
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} cartId    Required parameter: Cart Id
         * @param {CartCheckoutForm} cartCheckoutForm    Required parameter: TODO: type description here
         *
         * @return {promise<mixed>}
         */
        createCartCheckout : function(accountNumber, cartId, cartCheckoutForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts/{cart_id}/checkout";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cart_id" : cartId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(cartCheckoutForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
                body : cartCheckoutForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "User not authorized to perform the operation", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Delete all carts items
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int} cartId    Required parameter: Cart Id
         *
         * @return {promise<string>}
         */
        deleteItems : function(accountNumber, cartId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts/{cart_id}/items";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cart_id" : cartId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of cart items.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int} cartId    Required parameter: Cart Id
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response.
         *
         * @return {promise<mixed>}
         */
        getItems : function(accountNumber, cartId, page, limit){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts/{cart_id}/items";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cart_id" : cartId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * TODO: type endpoint description here
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int} cartId    Required parameter: Cart Id
         * @param {ItemForm} itemForm    Required parameter: TODO: type description here
         *
         * @return {promise<mixed>}
         */
        createItems : function(accountNumber, cartId, itemForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts/{cart_id}/items";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cart_id" : cartId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(itemForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
                body : itemForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "User not authorized to perform the operation", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Delete a cart item
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int} cartId    Required parameter: Cart Id
         * @param {int} itemId    Required parameter: Item Id
         *
         * @return {promise<string>}
         */
        deleteItem : function(accountNumber, cartId, itemId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts/{cart_id}/items/{item_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cart_id" : cartId,
                "item_id" : itemId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get a specific cart item.
         * @param {string} accountNumber    Required parameter: TODO: type description here
         * @param {int} cartId    Required parameter: TODO: type description here
         * @param {int} itemId    Required parameter: TODO: type description here
         *
         * @return {promise<mixed>}
         */
        getItem : function(accountNumber, cartId, itemId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/carts/{cart_id}/items/{item_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "cart_id" : cartId,
                "item_id" : itemId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of orders.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response.
         * @param {string|null} filter    Optional parameter: Allowed fields: from, to, created. Use the following delimiters to build your filters params. The vertical bar ('|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com\\\/users?filter='name::todd|city::denver|title::grand poobah
         *
         * @return {promise<mixed>}
         */
        getOrders : function(accountNumber, page, limit, filter){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/orders";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10,
                "filter" : filter
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get a specific order.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int} orderId    Required parameter: Order Id
         *
         * @return {promise<mixed>}
         */
        getOrder : function(accountNumber, orderId){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/orders/{order_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "order_id" : orderId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Update a trunk
         * @param {string} accountNumber    Required parameter: TODO: type description here
         * @param {int} trunkId    Required parameter: TODO: type description here
         * @param {TrunkForm} trunkForm    Required parameter: TODO: type description here
         *
         * @return {promise<string>}
         */
        updateTrunk : function(accountNumber, trunkId, trunkForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/trunks/{trunk_id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "trunk_id" : trunkId
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(trunkForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "PATCH",
                queryUrl : queryUrl,
                headers: headers,
                body : trunkForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get the list of tokens for the specific account.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {int|null} page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
         * @param {int|null} limit    Optional parameter: Maximum number of results to return in the response.
         *
         * @return {promise<mixed>}
         */
        getAccessTokens : function(accountNumber, page, limit){
            //Assign default values
            page = page || 1;
            limit = limit || 10;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/access-tokens";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "page" : (null != page)? page: 1,
                "limit" : (null != limit)? limit: 10
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Delete an access token
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} token    Required parameter: Token
         *
         * @return {promise<string>}
         */
        deleteAccessToken : function(accountNumber, token){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/access-tokens/{token}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "token" : token
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Allow clients to get a specific token.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} token    Required parameter: Token
         *
         * @return {promise<mixed>}
         */
        getAccessToken : function(accountNumber, token){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/access-tokens/{token}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "token" : token
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Update an account by a given account_number
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {string} token    Required parameter: Token
         * @param {TokenForm} tokenForm    Required parameter: TODO: type description here
         *
         * @return {promise<string>}
         */
        updateAccessToken : function(accountNumber, token, tokenForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/access-tokens/{token}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber,
                "token" : token
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(tokenForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "PATCH",
                queryUrl : queryUrl,
                headers: headers,
                body : tokenForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Create a new Access Token.
         * @param {string} accountNumber    Required parameter: Account Number
         * @param {TokenForm} accessTokenForm    Required parameter: TODO: type description here
         *
         * @return {promise<mixed>}
         */
        createAccessTokens : function(accountNumber, accessTokenForm){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/accounts/{account_number}/access-tokens";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "account_number" : accountNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8",
                "X-Auth-Token" : Configuration.xAuthToken
            };

            //Remove null values
            APIHelper.cleanObject(accessTokenForm);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
                body : accessTokenForm
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "You are not authenticated", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "This action needs a valid WSSE header", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Resource not found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Http bad request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        }
    }
});